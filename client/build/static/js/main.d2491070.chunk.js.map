{"version":3,"sources":["context/AccountProvider.jsx","context/UserProvider.jsx","components/loader/Loader.jsx","App.js","reportWebVitals.js","index.js"],"names":["AccountContext","createContext","AccountProvider","_ref","children","account","setAccount","useState","showloginButton","setShowloginButton","showlogoutButton","setShowlogoutButton","activeUsers","setActiveUsers","newMessageFlag","setNewMessageFlag","socket","useRef","useEffect","current","io","_jsx","Provider","value","UserContext","UserProvider","person","setPerson","Loader","CircularProgress","Messenger","lazy","App","GoogleOAuthProvider","clientId","Suspense","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"iGAAA,4DAGO,MAAMA,EAAiBC,wBAAc,MAqC7BC,IAnCSC,IAAiB,IAAhB,SAACC,GAASD,EAE/B,MAAQE,EAASC,GAAeC,sBACzBC,EAAiBC,GAAsBF,oBAAS,IAChDG,EAAkBC,GAAuBJ,oBAAS,IAElDK,EAAaC,GAAkBN,mBAAS,KAExCO,EAAgBC,GAAqBR,oBAAS,GAE/CS,EAASC,mBAMf,OAJAC,qBAAU,KACNF,EAAOG,QAAUC,YAAG,yBACrB,IAGCC,cAACrB,EAAesB,SAAQ,CAACC,MAAO,CAC5BlB,UACAC,aACAE,kBACAC,qBACAC,mBACAC,sBACAK,SACAJ,cACAC,iBACAC,iBACAC,qBACFX,SACGA,M,gCCnCb,oDAEO,MAAMoB,EAAcvB,wBAAc,MAa1BwB,IAXMtB,IAAiB,IAAhB,SAACC,GAASD,EAE5B,MAAQuB,EAAQC,GAAcpB,mBAAS,IAEvC,OACIc,cAACG,EAAYF,SAAQ,CAACC,MAAO,CAAEG,SAAQC,aAAYvB,SAC9CA,M,gJCDEwB,MANAA,IAEPP,cAACQ,IAAgB,ICKzB,MAAMC,EAAYC,gBAAK,IAAM,sDAmBdC,MAjBf,WAIE,OACEX,cAACY,IAAmB,CAACC,SAHN,2EAGyB9B,SACtCiB,cAACI,IAAY,CAAArB,SACXiB,cAACnB,IAAe,CAAAE,SACdiB,cAACc,WAAQ,CAACC,SAAUf,cAACO,EAAM,IAAIxB,SAC7BiB,cAACS,EAAS,aCTPO,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAKrC,IAAkD,IAAjD,OAAEsC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAAS1C,EACpEsC,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP1B,cAAC2B,IAAMC,WAAU,CAAA7C,SACfiB,cAACW,EAAG,MAENkB,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.d2491070.chunk.js","sourcesContent":["import { createContext, useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\n\nexport const AccountContext = createContext(null);\n\nconst AccountProvider = ({children}) => {\n\n    const [ account, setAccount ] = useState();\n    const [showloginButton, setShowloginButton] = useState(true);\n    const [showlogoutButton, setShowlogoutButton] = useState(false);\n\n    const [activeUsers, setActiveUsers] = useState([]);\n    \n    const [newMessageFlag, setNewMessageFlag] = useState(false);\n\n    const socket = useRef();\n\n    useEffect(() => {\n        socket.current = io('ws://localhost:9000');\n    }, [])\n\n    return (\n        <AccountContext.Provider value={{ \n            account, \n            setAccount, \n            showloginButton,\n            setShowloginButton,\n            showlogoutButton,\n            setShowlogoutButton,\n            socket,\n            activeUsers,\n            setActiveUsers,\n            newMessageFlag,\n            setNewMessageFlag\n        }}>\n            {children}\n        </AccountContext.Provider>\n    )\n}\n\nexport default AccountProvider;","import { createContext, useState } from 'react';\n\nexport const UserContext = createContext(null);\n\nconst UserProvider = ({children}) => {\n\n    const [ person, setPerson ] = useState({});\n    \n    return (\n        <UserContext.Provider value={{ person, setPerson }}>\n            {children}\n        </UserContext.Provider>\n    )\n}\n\nexport default UserProvider;","\nimport { CircularProgress } from \"@mui/material\"\n\nconst Loader = () => {\n    return (\n        <CircularProgress />\n    )\n}\n\nexport default Loader;","import { lazy, Suspense } from 'react';\n\nimport { GoogleOAuthProvider } from '@react-oauth/google';\n\n//components\nimport UserProvider from './context/UserProvider';\nimport AccountProvider from './context/AccountProvider';\n\nimport Loader from './components/loader/Loader';\n\nconst Messenger = lazy(() => import('./components/Messenger'));\n\nfunction App() {\n\n  const clientId = '246648691460-bsj1rub53iami1btvii0577h1on2je01.apps.googleusercontent.com';\n\n  return (\n    <GoogleOAuthProvider clientId={clientId}>\n      <UserProvider>\n        <AccountProvider>\n          <Suspense fallback={<Loader />}>\n            <Messenger/>\n          </Suspense>\n        </AccountProvider>\n      </UserProvider>\n    </GoogleOAuthProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}